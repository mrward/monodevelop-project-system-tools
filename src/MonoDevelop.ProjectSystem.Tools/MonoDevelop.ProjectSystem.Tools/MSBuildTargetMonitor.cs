//
// MSBuildTargetMonitor.cs
//
// Author:
//       Matt Ward <matt.ward@microsoft.com>
//
// Copyright (c) 2019 Microsoft Corporation
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using MonoDevelop.Core;
using MonoDevelop.Core.ProgressMonitoring;
using MonoDevelop.Projects;

namespace MonoDevelop.ProjectSystem.Tools
{
	class MSBuildTargetMonitor : IDisposable
	{
		MSBuildTarget buildTarget;
		MSBuildTargetProgressMonitor progressMonitor;
		TargetEvaluationContext context;

		public MSBuildTargetMonitor (
			Project project,
			string target,
			ConfigurationSelector configuration,
			TargetEvaluationContext context)
		{
			// Ensure log verbosity is set for non-build targets.
			this.context = context;
			context.LogVerbosity = Runtime.Preferences.MSBuildVerbosity.Value;

			buildTarget = new MSBuildTarget {
				ProjectName = project.Name,
				ProjectFileName = project.FileName,
				Targets = target ?? string.Empty,
				BuildType = MSBuildTarget.GetBuildType (target),
				Dimensions = project.GetDimensions (configuration)
			};

			buildTarget.Start ();

			ProjectSystemService.OnTargetStarted (buildTarget);
		}

		public ProgressMonitor GetProgressMonitor (ProgressMonitor monitor)
		{
			var aggregatedMonitor = monitor as AggregatedProgressMonitor;
			if (aggregatedMonitor == null) {
				aggregatedMonitor = new AggregatedProgressMonitor (monitor);
			}

			// Generate a bin log file.
			context.BinLogFilePath = buildTarget.BinLogFileName;

			// Ensure that a binlog is generated by using a LongOperations.
			// ShortOperations run in a temporary build session and share a single
			// binlog which is not supported by project system tools. Using
			// LongOperations ensures a binlog is created for each msbuild target.
			context.BuilderQueue = BuilderQueue.LongOperations;

			progressMonitor = new MSBuildTargetProgressMonitor (buildTarget.LogFileName);
			aggregatedMonitor.AddFollowerMonitor (progressMonitor, progressMonitor.Actions);

			return aggregatedMonitor;
		}

		public void Dispose ()
		{
			progressMonitor?.Dispose ();
		}

		public void OnResult (TargetEvaluationResult result)
		{
			buildTarget.OnResult (result);
			ProjectSystemService.OnTargetFinished (buildTarget);
		}

		public void OnException (Exception ex)
		{
			buildTarget.OnException (ex);
			ProjectSystemService.OnTargetFinished (buildTarget);
		}
	}
}
